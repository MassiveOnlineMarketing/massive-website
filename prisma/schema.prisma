// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  refreshToken          String?                @db.Text
  Project               Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Project {
  id          String    @id @default(cuid())
  userId      String
  projectName String
  domainUrl   String
  language    String
  country     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Keyword     Keyword[]
  improved    Int?
  worsened    Int?
  total       Int?
  topTen      Int?
  noChange    Int?
  notFound    Int?

  @@unique([id])
}

model Keyword {
  id        String   @id @default(cuid())
  projectId String
  keyword   String
  createdAt DateTime @default(now())

  project    Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  SerpResult SerpResult[]
  Result     Result[]
  tags       Tag[]
}

model SerpResult {
  id              String   @id @default(cuid())
  keywordId       String
  position        Int
  url             String
  metaTitle       String
  metaDescription String
  createdAt       DateTime @default(now())

  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model Result {
  id              String   @id @default(cuid())
  keywordId       String
  keywordName     String
  position        Int?
  url             String?
  metaTitle       String?
  metaDescription String?
  firstPosition   Int?
  bestPosition    Int?
  latestChange    Int?
  createdAt       DateTime @default(now())

  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  keywords Keyword[]
}

model NieuwsbriefSignup {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}
